<protocol name="lipstick_recorder">
    <copyright>
        Copyright (C) 2014 Jolla Ltd.

        Permission to use, copy, modify, distribute, and sell this
        software and its documentation for any purpose is hereby granted
        without fee, provided that the above copyright notice appear in
        all copies and that both that copyright notice and this permission
        notice appear in supporting documentation, and that the name of
        the copyright holders not be used in advertising or publicity
        pertaining to distribution of the software without specific,
        written prior permission.  The copyright holders make no
        representations about the suitability of this software for any
        purpose.  It is provided "as is" without express or implied
        warranty.

        THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
        SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
        FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
        SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
        WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
        AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
        ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
        THIS SOFTWARE.
    </copyright>

    <interface name="lipstick_recorder_manager" version="1">
        <request name="create_recorder">
            <description summary="create a recorder object">
                Create a recorder object for the specified output.
            </description>
            <arg name="recorder" type="new_id" interface="lipstick_recorder"/>
            <arg name="output" type="object" interface="wl_output"/>
        </request>
    </interface>

    <interface name="lipstick_recorder" version="1">
        <request name="destroy" type="destructor">
            <description summary="destroy the recorder object">
                Destroy the recorder object, discarding any frame request
                that may be pending.
            </description>
        </request>
        <request name="record_frame">
            <description summary="request a frame to be recorded">
                Ask the compositor to record its next frame, putting
                the content into the specified buffer data. The frame
                event will be sent when the frame is recorded.
                Only one frame will be recorded, the client will have
                to call this again after the frame event if it wants to
                record more frames.

                The buffer must be a shm buffer, trying to use another
                type of buffer will result in frame being sent with the
                bad_buffer result.
            </description>
            <arg name="buffer" type="object" interface="wl_buffer"/>
        </request>

        <enum name="result">
            <entry name="ok" value="1"/>
            <entry name="bad_buffer" value="2"/>
        </enum>

        <event name="frame">
            <description summary="notify a frame was recorded, or an error">
                The compositor will send this event after a frame was
                recorded, or in case an error happened. The client can
                call record_frame again to record the next frame.

                The value of the 'result' argument will be one of the
                values of the 'result' enum.
                'time' is the time the compositor recorded that frame,
                in milliseconds, with an unspecified base.
            </description>
            <arg name="result" type="int"/>
            <arg name="buffer" type="object" interface="wl_buffer"/>
            <arg name="time" type="uint"/>
        </event>

        <event name="cancelled">
            <description summary="notify a request was cancelled">
                The compositor will send this event if the client calls
                request_frame more than one time for the same compositor
                frame. The cancel event will be sent carrying the old
                buffer, and the frame will be recorded using the newest
                buffer.
            </description>
            <arg name="buffer" type="object" interface="wl_buffer"/>
        </event>
    </interface>
</protocol>
